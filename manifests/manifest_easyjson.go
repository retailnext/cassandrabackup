// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package manifests

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	digest "github.com/retailnext/cassandrabackup/digest"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4ef6ea8bDecodeGithubComRetailnextCassandrabackupManifests(in *jlexer.Lexer, out *Manifest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			(out.Time).UnmarshalEasyJSON(in)
		case "manifest_type":
			out.ManifestType = ManifestType(in.Int())
		case "host_id":
			out.HostID = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "partitioner":
			out.Partitioner = string(in.String())
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]string, 0, 4)
					} else {
						out.Tokens = []string{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Tokens = append(out.Tokens, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_files":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DataFiles = make(map[string]digest.ForRestore)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 digest.ForRestore
					(v2).UnmarshalEasyJSON(in)
					(out.DataFiles)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4ef6ea8bEncodeGithubComRetailnextCassandrabackupManifests(out *jwriter.Writer, in Manifest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		(in.Time).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"manifest_type\":"
		out.RawString(prefix)
		out.Int(int(in.ManifestType))
	}
	{
		const prefix string = ",\"host_id\":"
		out.RawString(prefix)
		out.String(string(in.HostID))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"partitioner\":"
		out.RawString(prefix)
		out.String(string(in.Partitioner))
	}
	{
		const prefix string = ",\"tokens\":"
		out.RawString(prefix)
		if in.Tokens == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Tokens {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data_files\":"
		out.RawString(prefix)
		if in.DataFiles == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.DataFiles {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				(v5Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Manifest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4ef6ea8bEncodeGithubComRetailnextCassandrabackupManifests(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Manifest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4ef6ea8bEncodeGithubComRetailnextCassandrabackupManifests(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Manifest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4ef6ea8bDecodeGithubComRetailnextCassandrabackupManifests(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Manifest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4ef6ea8bDecodeGithubComRetailnextCassandrabackupManifests(l, v)
}
